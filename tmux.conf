# cat << EOF > /dev/null

# -------- GENERAL MAPPING SETUP ----------------------------------------------
# remap prefix from 'C-b' to 'C-a'
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix


# split panes using | (vertical) and - (horizontal)
# start with current path
bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
unbind '"'
unbind %

# new window with current path
bind c new-window -c "#{pane_current_path}"


setw -q -g utf8 on

set -g base-index 1                         # start windows numbering at 1
setw -g pane-base-index 1                   # start pane numbering at 1

set -g default-terminal "screen-256color"   # colors!
set -g status on
setw -g xterm-keys on
set -s escape-time 10                       # faster command sequences
set -sg repeat-time 600                     # increase repeat timeout
set -s focus-events on

setw -g automatic-rename on # rename window to reflect current program
set -g renumber-windows on  # renumber windows when a window is closed

set -g set-titles on                        # set terminal title

# enable mouse mode (tmux 2.1 and above)
set -g mouse off
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1


# activity
set -g monitor-activity on
setw -g monitor-activity on
#set -g visual-activity off


bind r source-file ~/.tmux.conf \; display-message "tmux configure reloaded"

# vi
setw -g mode-keys vi

# copy mode
bind Enter copy-mode # enter copy mode
bind b list-buffers  # list paster buffers
bind p paste-buffer  # paste from the top pate buffer
bind P choose-buffer # choose which buffer to paste from

#bind -t vi-copy y copy-pipe "xclip -sel clip -i"

# only MAC OS
set -g default-command 'reattach-to-user-namespace $SHELL --login' 

# -------- DESIGN CHANGE ------------------------------------------------------
# panes
set -g pane-border-bg colour232
set -g pane-border-fg colour239
set -g pane-active-border-bg colour232
set -g pane-active-border-fg colour33

# messages
set -g message-attr none
set -g message-fg colour255
set -g message-bg colour233

#window mode
setw -g mode-attr none
setw -g mode-bg colour25
setw -g mode-fg colour255

set -g window-style 'fg=colour250,bg=colour234'
set -g window-active-style 'fg=colour255,bg=colour233'

# status bar
set -g status-fg colour255
set -g status-bg colour16

set -g status-justify left
set -g status-position bottom
set -g status-right-length 150
set -g status-left-length 150

set -g status-left  '#[bg=colour250,fg=colour233] § #S #[bg=colour16] '
#set -g status-right '#[bg=colour234,fg=colour254] #(whoami) · #[bg=colour234,fg=colour255]#H  #[fg=colour233,bg=colour245] %I:%M %p #[fg=colour233,bg=colour255] %m-%d-%Y '
#set -g status-right '#[bg=colour235]#[fg=colour255]║#[fg=colour255]  #(whoami)  #[fg=colour255]║  #[bg=colour235,fg=colour255]#H  #[bg=colour238]#[fg=colour196]║ #[fg=colour255]%I:%M %p #[fg=colour196]│ #[fg=colour255]%m-%d-%Y #[fg=colour196]║' 
set -g status-right '#[bg=colour235]#[fg=colour255]│ ☰  #(whoami) │ #[bg=colour235,fg=colour255]#H │#[bg=colour239]#[fg=colour196]█ #[fg=colour255]%I:%M %p #[fg=colour196]║ #[fg=colour255]%m-%d-%Y #[fg=colour196]█'

setw -g window-status-current-attr bold
setw -g window-status-current-bg colour25
setw -g window-status-current-fg colour255
#setw -g window-status-current-format '  #I) #W#F  '
setw -g window-status-current-format '  #[fg=colour250]#I#[fg=colour255]) #W#[fg=colour250]#F#[fg=colour255]  '


setw -g window-status-attr none
setw -g window-status-bg colour16
setw -g window-status-fg colour255
#setw -g window-status-format ' #I) #W#F '
setw -g window-status-format '  #[fg=colour33]#I#[fg=colour255]) #W#[fg=colour33]#F#[fg=colour255]  '

setw -g window-status-activity-attr none
setw -g window-status-activity-bg colour235
setw -g window-status-activity-fg colour25


setw -g window-status-bell-bg colour1
setw -g window-status-bell-fg colour250


# -------- COMMANDS -----------------------------------------------------------
#
# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# __newline='
# '
#
# _is_enabled() {
#   ( ([ x"$1" = x"enabled" ] || [ x"$1" = x"true" ] || [ x"$1" = x"yes" ] || [ x"$1" = x"1" ]) && return 0 ) || return 1
# }
#
# _username() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   ssh_only=$2
#   # shellcheck disable=SC2039
#   if [ x"$OSTYPE" = x"cygwin" ]; then
#     pid=$(ps -a | awk -v tty="${tty##/dev/}" '$5 == tty && /ssh/ && && !/vagrant ssh/ && !/autossh/ && !/-W/ { print $1 }')
#     [ -n "$pid" ] && ssh_parameters=$(tr '\0' ' ' < "/proc/$pid/cmdline" | sed 's/^ssh //')
#   else
#     ssh_parameters=$(ps -t "$tty" -o command= | awk '/ssh/ && !/vagrant ssh/ && !/autossh/ && !/-W/ { $1=""; print $0; exit }')
#   fi
#   if [ -n "$ssh_parameters" ]; then
#     # shellcheck disable=SC2086
#     username=$(ssh -G $ssh_parameters 2>/dev/null | awk 'NR > 2 { exit } ; /^user / { print $2 }')
#     # shellcheck disable=SC2086
#     [ -z "$username" ] && username=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%username%% %r >&2'" $ssh_parameters 2>&1 | awk '/^%username% / { print $2; exit }')
#   else
#     if ! _is_enabled "$ssh_only"; then
#       # shellcheck disable=SC2039
#       if [ x"$OSTYPE" = x"cygwin" ]; then
#         username=$(whoami)
#       else
#         username=$(ps -t "$tty" -o ruser=WIDE-RUSER-COLUMN -o pid= -o ppid= -o command= | awk '
#           !/ssh/ { user[$2] = $1; ppid[$3] = 1 }
#           END {
#             for (i in user)
#               if (!(i in ppid))
#               {
#                 print user[i]
#                 exit
#               }
#           }
#         ')
#       fi
#     fi
#   fi
#
#   echo "$username"
# }
#
# _hostname() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   ssh_only=$2
#   # shellcheck disable=SC2039
#   if [ x"$OSTYPE" = x"cygwin" ]; then
#     pid=$(ps -a | awk -v tty="${tty##/dev/}" '$5 == tty && /ssh/ && !/vagrant ssh/ && !/autossh/ && !/-W/ { print $1 }')
#     [ -n "$pid" ] && ssh_parameters=$(tr '\0' ' ' < "/proc/$pid/cmdline" | sed 's/^ssh //')
#   else
#     ssh_parameters=$(ps -t "$tty" -o command= | awk '/ssh/ && !/vagrant ssh/ && !/autossh/ && !/-W/ { $1=""; print $0; exit }')
#   fi
#   if [ -n "$ssh_parameters" ]; then
#     # shellcheck disable=SC2086
#     hostname=$(ssh -G $ssh_parameters 2>/dev/null | awk 'NR > 2 { exit } ; /^hostname / { print $2 }')
#     # shellcheck disable=SC2086
#     [ -z "$hostname" ] && hostname=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%hostname%% %h >&2'" $ssh_parameters 2>&1 | awk '/^%hostname% / { print $2; exit }')
#     #shellcheck disable=SC1004
#     hostname=$(echo "$hostname" | awk '\
#     { \
#       if ($1~/^[0-9.:]+$/) \
#         print $1; \
#       else \
#         split($1, a, ".") ; print a[1] \
#     }')
#   else
#     if ! _is_enabled "$ssh_only"; then
#       hostname=$(command hostname -s)
#     fi
#   fi
#
#   echo "$hostname"
# }
#
# _root() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   username=$(_username "$tty" false)
#
#   if [ x"$username" = x"root" ]; then
#     tmux show -gqv '@root'
#   else
#     echo ""
#   fi
# }
#
# _toggle_mouse() {
#   if tmux show -g -w | grep -q mode-mouse; then
#     old=$(tmux show -g -w | grep mode-mouse | cut -d' ' -f2)
#     new=""
#
#     if [ "$old" = "on" ]; then
#       new="off"
#     else
#       new="on"
#     fi
#
#     tmux set -g mode-mouse $new \;\
#          set -g mouse-resize-pane $new \;\
#          set -g mouse-select-pane $new \;\
#          set -g mouse-select-window $new \;\
#          display "mouse: $new"
#   else
#     old=$(tmux show -g | grep mouse | head -n 1 | cut -d' ' -f2)
#     new=""
#
#     if [ "$old" = "on" ]; then
#       new="off"
#     else
#       new="on"
#     fi
#
#     tmux set -g mouse $new \;\
#          display "mouse: $new"
#   fi
# }
#
# "$@"
