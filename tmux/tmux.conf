# cat << EOF > /dev/null

# -------- GENERAL MAPPING SETUP ----------------------------------------------
# remap prefix from 'C-b' to 'C-a'
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix


# split panes using | (vertical) and - (horizontal)
# start with current path
bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
unbind '"'
unbind %

# new window with current path
bind c new-window -c "#{pane_current_path}"

# enable utf-8
setw -q -g utf8 on

set -g base-index 1                         # start windows numbering at 1
setw -g pane-base-index 1                   # start pane numbering at 1

# colors!
set -g default-terminal "xterm-256color"
set-option -ga terminal-overrides ",xterm-255color:Tc"
#set -g default-terminal "screen-256color"
#set-option -ga terminal-overrides ",screen-256color:Tc"

set -g status on
setw -g xterm-keys on
set -sg escape-time 0                       # faster command sequences
set -sg repeat-time 600                     # increase repeat timeout
set -g display-time 4000                    # messages are displayed for 4 seconds
set -s focus-events on

setw -g automatic-rename on                 # rename window to reflect current program
set -g renumber-windows on                  # renumber windows when a window is closed

set -g set-titles on                        # set terminal title

# mouse setting
set -g mouse off                            # enable mouse mode (tmux 2.1 and above)
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# activity
set -g monitor-activity on
setw -g monitor-activity on
#set -g visual-activity off

bind r source-file ~/.tmux.conf \; display-message "[+] tmux configuration reloaded"

# vi
set-window-option -g mode-keys vi

# copy mode
bind Enter copy-mode # enter copy mode
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel

# only MAC OS
#set -g default-command 'reattach-to-user-namespace $SHELL --login' 

# -------- DESIGN CHANGE ------------------------------------------------------
# panes
set -g pane-border-bg colour232
set -g pane-border-fg colour239
set -g pane-active-border-bg colour232
set -g pane-active-border-fg colour33

# messages
set -g message-attr bold
set -g message-fg "#000000"
set -g message-bg "#fce205"

#window mode
setw -g mode-attr bold
setw -g mode-fg "#000000"
setw -g mode-bg "#fce205"

#set -g window-style 'bg=#1f1f1f'
#set -g window-active-style 'bg=#111111'

# status bar
set -g status-fg "#ffffff"
set -g status-bg "#080808"

set -g status-justify left
set -g status-position bottom
set -g status-right-length 150
set -g status-left-length 150

set -g status-left  '#[bg=#ffc20f] #[bg=#202020]#[fg=#ffffff,bold] ยง #[bg=#ffc20f,fg=#000000,bold] #S #[bg=#000000] '
set -g status-right '#[bg=#000000]#[fg=#ffffff]  โฐ  #(whoami) #[fg=#ffffff,bold] | #[bg=#000000,fg=#ffffff,none]#H  #[bg=#333333]#[fg=#ffffff]  #[fg=#ffffff]%I:%M %p #[fg=#ffffff,bold]|#[bg=#333333]#[fg=#ffffff,none] %m/%d/%Y #[bg=#c20003] '

setw -g window-status-current-attr bold
#setw -g window-status-current-bg "#002f6c"
setw -g window-status-current-bg "#1f1f1f"
setw -g window-status-current-fg "#ffffff"
#setw -g window-status-current-format '  #I) #W#F  '
setw -g window-status-current-format '#[bg=#004bff] #I #[bg=#2a3236]#[fg=#ffffff]  #[fg=#ffffff]#W#[fg=colour33]#F#[fg=#ffffff]  '


setw -g window-status-attr none
setw -g window-status-bg "#000000"
setw -g window-status-fg "#ffffff"
#setw -g window-status-format ' #I) #W#F '
#setw -g window-status-format '  #[fg=colour33]#I#[fg=colour255]) #W#[fg=colour33]#F#[fg=colour255]  '
setw -g window-status-format '#[bg=#202020]#[fg=colour33] #I #[bg=#101010]#[fg=colour255]  #W#[fg=colour33]#F#[fg=colour255]  '

setw -g window-status-activity-attr none
setw -g window-status-activity-bg "#222222"
setw -g window-status-activity-fg colour33

setw -g window-status-bell-attr none
setw -g window-status-bell-bg "#ff0000"
setw -g window-status-bell-fg "#ffffff"

# -------- PLUGINS ------------------------------------------------------------
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'
set -g @continuum-restore 'on'

run '~/.tmux/plugins/tpm/tpm'

# -------- COMMANDS -----------------------------------------------------------
#
# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# __newline='
# '
#
# _is_enabled() {
#   ( ([ x"$1" = x"enabled" ] || [ x"$1" = x"true" ] || [ x"$1" = x"yes" ] || [ x"$1" = x"1" ]) && return 0 ) || return 1
# }
#
# _username() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   ssh_only=$2
#   # shellcheck disable=SC2039
#   if [ x"$OSTYPE" = x"cygwin" ]; then
#     pid=$(ps -a | awk -v tty="${tty##/dev/}" '$5 == tty && /ssh/ && && !/vagrant ssh/ && !/autossh/ && !/-W/ { print $1 }')
#     [ -n "$pid" ] && ssh_parameters=$(tr '\0' ' ' < "/proc/$pid/cmdline" | sed 's/^ssh //')
#   else
#     ssh_parameters=$(ps -t "$tty" -o command= | awk '/ssh/ && !/vagrant ssh/ && !/autossh/ && !/-W/ { $1=""; print $0; exit }')
#   fi
#   if [ -n "$ssh_parameters" ]; then
#     # shellcheck disable=SC2086
#     username=$(ssh -G $ssh_parameters 2>/dev/null | awk 'NR > 2 { exit } ; /^user / { print $2 }')
#     # shellcheck disable=SC2086
#     [ -z "$username" ] && username=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%username%% %r >&2'" $ssh_parameters 2>&1 | awk '/^%username% / { print $2; exit }')
#   else
#     if ! _is_enabled "$ssh_only"; then
#       # shellcheck disable=SC2039
#       if [ x"$OSTYPE" = x"cygwin" ]; then
#         username=$(whoami)
#       else
#         username=$(ps -t "$tty" -o ruser=WIDE-RUSER-COLUMN -o pid= -o ppid= -o command= | awk '
#           !/ssh/ { user[$2] = $1; ppid[$3] = 1 }
#           END {
#             for (i in user)
#               if (!(i in ppid))
#               {
#                 print user[i]
#                 exit
#               }
#           }
#         ')
#       fi
#     fi
#   fi
#
#   echo "$username"
# }
#
# _hostname() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   ssh_only=$2
#   # shellcheck disable=SC2039
#   if [ x"$OSTYPE" = x"cygwin" ]; then
#     pid=$(ps -a | awk -v tty="${tty##/dev/}" '$5 == tty && /ssh/ && !/vagrant ssh/ && !/autossh/ && !/-W/ { print $1 }')
#     [ -n "$pid" ] && ssh_parameters=$(tr '\0' ' ' < "/proc/$pid/cmdline" | sed 's/^ssh //')
#   else
#     ssh_parameters=$(ps -t "$tty" -o command= | awk '/ssh/ && !/vagrant ssh/ && !/autossh/ && !/-W/ { $1=""; print $0; exit }')
#   fi
#   if [ -n "$ssh_parameters" ]; then
#     # shellcheck disable=SC2086
#     hostname=$(ssh -G $ssh_parameters 2>/dev/null | awk 'NR > 2 { exit } ; /^hostname / { print $2 }')
#     # shellcheck disable=SC2086
#     [ -z "$hostname" ] && hostname=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%hostname%% %h >&2'" $ssh_parameters 2>&1 | awk '/^%hostname% / { print $2; exit }')
#     #shellcheck disable=SC1004
#     hostname=$(echo "$hostname" | awk '\
#     { \
#       if ($1~/^[0-9.:]+$/) \
#         print $1; \
#       else \
#         split($1, a, ".") ; print a[1] \
#     }')
#   else
#     if ! _is_enabled "$ssh_only"; then
#       hostname=$(command hostname -s)
#     fi
#   fi
#
#   echo "$hostname"
# }
#
# _root() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   username=$(_username "$tty" false)
#
#   if [ x"$username" = x"root" ]; then
#     tmux show -gqv '@root'
#   else
#     echo ""
#   fi
# }
#
# _toggle_mouse() {
#   if tmux show -g -w | grep -q mode-mouse; then
#     old=$(tmux show -g -w | grep mode-mouse | cut -d' ' -f2)
#     new=""
#
#     if [ "$old" = "on" ]; then
#       new="off"
#     else
#       new="on"
#     fi
#
#     tmux set -g mode-mouse $new \;\
#          set -g mouse-resize-pane $new \;\
#          set -g mouse-select-pane $new \;\
#          set -g mouse-select-window $new \;\
#          display "mouse: $new"
#   else
#     old=$(tmux show -g | grep mouse | head -n 1 | cut -d' ' -f2)
#     new=""
#
#     if [ "$old" = "on" ]; then
#       new="off"
#     else
#       new="on"
#     fi
#
#     tmux set -g mouse $new \;\
#          display "mouse: $new"
#   fi
# }
#
# "$@"
